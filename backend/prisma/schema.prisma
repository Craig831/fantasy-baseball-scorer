generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String              @id @default(uuid())
  email                     String              @unique @db.VarChar(255)
  passwordHash              String              @map("password_hash") @db.VarChar(60)
  emailVerified             Boolean             @default(false) @map("email_verified")
  emailVerificationToken    String?             @map("email_verification_token") @db.VarChar(255)
  mfaEnabled                Boolean             @default(false) @map("mfa_enabled")
  mfaSecret                 String?             @map("mfa_secret") @db.VarChar(255)
  privacySettings           Json                @default("{}") @map("privacy_settings")
  createdAt                 DateTime            @default(now()) @map("created_at")
  updatedAt                 DateTime            @updatedAt @map("updated_at")
  lastLoginAt               DateTime?           @map("last_login_at")
  deletedAt                 DateTime?           @map("deleted_at")

  scoringConfigs            ScoringConfiguration[]
  lineups                   Lineup[]
  auditLogs                 AuditLog[]
  refreshTokens             RefreshToken[]

  @@index([email], name: "idx_users_email")
  @@index([emailVerified], name: "idx_users_email_verified")
  @@index([deletedAt], name: "idx_users_deleted_at")
  @@map("users")
}

model ScoringConfiguration {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  name       String   @db.VarChar(100)
  categories Json
  isActive   Boolean  @default(false) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lineups    Lineup[]

  @@unique([userId, isActive], name: "unique_active_config")
  @@index([userId], name: "idx_scoring_configs_user_id")
  @@index([userId, isActive], name: "idx_scoring_configs_user_active")
  @@map("scoring_configurations")
}

model Player {
  id            String              @id @db.VarChar(50)
  name          String              @db.VarChar(255)
  team          String              @db.VarChar(10)
  position      String              @db.VarChar(20)
  jerseyNumber  Int?                @map("jersey_number")
  active        Boolean             @default(true)
  season        Int
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  syncedAt      DateTime            @default(now()) @map("synced_at")

  statistics    PlayerStatistic[]
  lineupSlots   LineupSlot[]

  @@index([team, position], name: "idx_players_team_position")
  @@index([active, season], name: "idx_players_active_season")
  @@index([syncedAt], name: "idx_players_synced_at")
  @@map("players")
}

model PlayerStatistic {
  id            String   @id @default(uuid())
  playerId      String   @map("player_id") @db.VarChar(50)
  statDate      DateTime @map("stat_date") @db.Date
  opponent      String?  @db.VarChar(10)
  isSeasonTotal Boolean  @default(false) @map("is_season_total")
  battingStats  Json     @default("{}") @map("batting_stats")
  pitchingStats Json     @default("{}") @map("pitching_stats")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, statDate, opponent], name: "unique_player_game")
  @@index([playerId, statDate], name: "idx_player_stats_player_date")
  @@index([isSeasonTotal], name: "idx_player_stats_season_total")
  @@map("player_statistics")
}

model Lineup {
  id                String                    @id @default(uuid())
  userId            String                    @map("user_id")
  name              String                    @db.VarChar(100)
  scoringConfigId   String?                   @map("scoring_config_id")
  projectedScore    Decimal                   @default(0.0) @map("projected_score") @db.Decimal(10, 2)
  actualScore       Decimal?                  @map("actual_score") @db.Decimal(10, 2)
  gameDate          DateTime?                 @map("game_date") @db.Date
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  deletedAt         DateTime?                 @map("deleted_at")

  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  scoringConfig     ScoringConfiguration?     @relation(fields: [scoringConfigId], references: [id], onDelete: SetNull)
  slots             LineupSlot[]

  @@index([userId], name: "idx_lineups_user_id")
  @@index([userId, gameDate], name: "idx_lineups_user_date")
  @@index([deletedAt], name: "idx_lineups_deleted_at")
  @@map("lineups")
}

model LineupSlot {
  id             String   @id @default(uuid())
  lineupId       String   @map("lineup_id")
  slotOrder      Int      @map("slot_order")
  playerId       String?  @map("player_id") @db.VarChar(50)
  projectedScore Decimal  @default(0.0) @map("projected_score") @db.Decimal(10, 2)
  actualScore    Decimal? @map("actual_score") @db.Decimal(10, 2)
  locked         Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  lineup         Lineup   @relation(fields: [lineupId], references: [id], onDelete: Cascade)
  player         Player?  @relation(fields: [playerId], references: [id], onDelete: SetNull)

  @@unique([lineupId, slotOrder], name: "unique_lineup_slot_order")
  @@unique([lineupId, playerId], name: "unique_lineup_player")
  @@index([lineupId], name: "idx_lineup_slots_lineup_id")
  @@index([playerId], name: "idx_lineup_slots_player_id")
  @@map("lineup_slots")
}

model AuditLog {
  id         String    @id @default(uuid())
  userId     String?   @map("user_id")
  action     String    @db.VarChar(50)
  entityType String?   @map("entity_type") @db.VarChar(50)
  entityId   String?   @map("entity_id") @db.VarChar(255)
  ipAddress  String    @map("ip_address") @db.VarChar(45)
  userAgent  String?   @map("user_agent") @db.Text
  metadata   Json      @default("{}")
  createdAt  DateTime  @default(now()) @map("created_at")

  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt], name: "idx_audit_logs_user_created")
  @@index([action, createdAt], name: "idx_audit_logs_action_created")
  @@index([entityType, entityId], name: "idx_audit_logs_entity")
  @@map("audit_logs")
}

model RefreshToken {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  token      String    @unique @db.VarChar(255)
  expiresAt  DateTime  @map("expires_at")
  revoked    Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map("created_at")
  lastUsedAt DateTime? @map("last_used_at")

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token], name: "idx_refresh_tokens_token")
  @@index([userId], name: "idx_refresh_tokens_user_id")
  @@index([expiresAt], name: "idx_refresh_tokens_expires_at")
  @@map("refresh_tokens")
}
