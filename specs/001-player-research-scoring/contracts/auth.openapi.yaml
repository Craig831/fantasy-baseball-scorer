openapi: 3.0.3
info:
  title: Fantasy Baseball Scorer - Authentication API
  description: User registration, authentication, and MFA management endpoints
  version: 1.0.0
  contact:
    name: Fantasy Baseball Scorer Team

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://api.fantasy-baseball-scorer.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: MFA
    description: Multi-factor authentication setup and verification

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user account
      description: Create a new user account with email and password. Sends verification email.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                  description: Valid email address
                password:
                  type: string
                  format: password
                  minLength: 12
                  example: SecureP@ssw0rd!
                  description: Min 12 chars, 1 uppercase, 1 lowercase, 1 number, 1 special char
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      message:
                        type: string
                        example: Verification email sent to user@example.com
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  - code: EMAIL_EXISTS
                    message: Email already registered

  /auth/verify-email:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user email using token from verification email
      operationId: verifyEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Email verification token
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Email verified successfully
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user with email and password. Returns JWT tokens if MFA not enabled, or requires MFA if enabled.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd!
                mfaCode:
                  type: string
                  pattern: '^\d{6}$'
                  example: '123456'
                  description: TOTP code (required if MFA enabled)
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                        description: JWT access token (15 min expiry)
                      refreshToken:
                        type: string
                        format: uuid
                        example: 550e8400-e29b-41d4-a716-446655440000
                        description: Refresh token (7 day expiry)
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials or MFA code required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidCredentials:
                  value:
                    errors:
                      - code: INVALID_CREDENTIALS
                        message: Invalid email or password
                mfaRequired:
                  value:
                    errors:
                      - code: MFA_REQUIRED
                        message: MFA code required
        '403':
          description: Email not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Obtain new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  format: uuid
                  example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        format: uuid
                        example: 660e8400-e29b-41d4-a716-446655440001
                        description: New refresh token (rotation)
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate refresh token and end session
      operationId: logout
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  format: uuid
                  example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Logged out successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email to user
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Password reset email sent (always returns 200 for security)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: If the email exists, a password reset link has been sent

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset user password using token from reset email
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  description: Password reset token from email
                newPassword:
                  type: string
                  format: password
                  minLength: 12
                  example: NewSecureP@ssw0rd!
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Password reset successfully
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/setup:
    post:
      tags:
        - MFA
      summary: Setup MFA
      description: Generate TOTP secret and QR code for MFA setup
      operationId: setupMFA
      security:
        - bearerAuth: []
      responses:
        '200':
          description: MFA setup data generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      secret:
                        type: string
                        example: JBSWY3DPEHPK3PXP
                        description: TOTP secret (base32 encoded)
                      qrCodeUrl:
                        type: string
                        format: uri
                        example: otpauth://totp/FantasyBaseball:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=FantasyBaseball
                        description: QR code URL for authenticator apps
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: MFA already enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/verify:
    post:
      tags:
        - MFA
      summary: Verify and enable MFA
      description: Verify TOTP code and enable MFA for user account
      operationId: verifyMFA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  pattern: '^\d{6}$'
                  example: '123456'
                  description: TOTP code from authenticator app
      responses:
        '200':
          description: MFA enabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: MFA enabled successfully
                      recoveryCodes:
                        type: array
                        items:
                          type: string
                        example: ['ABCD-1234', 'EFGH-5678']
                        description: One-time recovery codes (store securely)
        '400':
          description: Invalid TOTP code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/mfa/disable:
    post:
      tags:
        - MFA
      summary: Disable MFA
      description: Disable MFA for user account
      operationId: disableMFA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - code
              properties:
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd!
                  description: Current password for verification
                code:
                  type: string
                  pattern: '^\d{6}$'
                  example: '123456'
                  description: Current TOTP code
      responses:
        '200':
          description: MFA disabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: MFA disabled successfully
        '400':
          description: Invalid password or TOTP code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from login

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          example: user@example.com
        emailVerified:
          type: boolean
          example: true
        mfaEnabled:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2025-10-24T12:00:00Z'
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          example: '2025-10-24T14:30:00Z'

    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: VALIDATION_ERROR
              message:
                type: string
                example: Invalid input data
              field:
                type: string
                example: email
                description: Field name (for validation errors)

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - code: VALIDATION_ERROR
                message: Password must be at least 12 characters
                field: password

    Unauthorized:
      description: Missing or invalid authentication token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - code: UNAUTHORIZED
                message: Invalid or expired token
